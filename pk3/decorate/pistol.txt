//Most generalizable code will be explained here.
//I'm commenting a lot because I'm new and thus prone to screwing up.
Actor NewPistol : Weapon Replaces Pistol
{
	Weapon.Ammotype1 "LoadedPistol"	
	Weapon.Ammogive2 8
	Weapon.Ammouse1 1
	Weapon.Ammotype2 "Clip"

	+WEAPON.NOAUTOFIRE
	+WEAPON.AMMO_OPTIONAL
	
	States
	{
		Ready:
			/*See the custom keybind for a reload. 
			* ReloadCheckerGiver does what it says, allowing weapon
			* ready states to check for its presence and reload.
			* Easily copy-pastable, just make sure to have reloadstart 
			* take away the checker, or infinite reloads will happen.
			**/
			TNT1 A 0 A_JumpIfInventory("ReloadChecker", 1, "ReloadStart")
			PISG A 1 A_WeaponReady
			Loop
		Deselect:
			PISG A 1 A_Lower
			Loop
		Select:
			PISG A 1 A_Raise
			Loop
		Fire:
			TNT1 A 0 A_JumpIfNoAmmo("ReloadStart")
			TNT1 A 0 A_PlaySound("weapons/pistol", CHAN_WEAPON)
			TNT1 A 0 A_GunFlash
			PISG B 2 A_FireCustomMissile("PistolBullet", 0, 1, 0, 0, 0, 0)
			PISG BB 1 A_WeaponReady
			PISG CCC 1 A_WeaponReady
			PISG BB 1 A_WeaponReady
			Goto Ready
		Flash:
			PISF A 3 Bright A_Light1
			Goto LightDone
			PISF A 3 Bright A_Light1
			Goto LightDone
		Spawn:
			PIST A -1
			Stop
		AltFire:
			PISG A 1 Offset(-16, 54)
			PISG A 1 Offset(-32, 68)
			RPUN B 1 Offset(0, 32)
			RPUN C 2 A_CustomPunch(40, 1, 4, "KnockbackPuff")
			RPUN D 8
			RPUN C 7
			Goto Ready
		ReloadStart:
			TNT1 A 0 A_TakeInventory("ReloadChecker", 1)
			TNT1 A 0 A_JumpIfInventory("LoadedPistol", 0, "ReloadFail")
			TNT1 A 0 A_JumpIfInventory("Clip", 1, "ReloadStart2")
			Goto ReloadFail
		ReloadStart2:
			/*Offsets are cancelled without WRF_NOBOB
			* WRF_NOPRIMARY so you can punch when you want
			* along with A_WeaponReady allowing you to altfire
			**/
			PISG A 1 Offset(0, 32) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 34) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 36) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 38) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 40) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 42) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 44) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 46) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 48) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 50) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 52) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 54) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 56) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 58) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 1 Offset(0, 60) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 62) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 0 Offset(0, 64) A_PlaySound("sounds/pistolload", CHAN_WEAPON)
			PISG A 18 Offset(0, 64) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			Goto ReloadLoop
		ReloadLoop:
			TNT1 A 0 A_TakeInventory("Clip", 1)
			TNT1 A 0 A_GiveInventory("LoadedPistol", 1)
			TNT1 A 0 A_JumpIfInventory("LoadedPistol", 0, "ReloadEnd")
			TNT1 A 0 A_JumpIfInventory("Clip", 1, "ReloadLoop")
		ReloadFail:
			PISG A 1
			Goto Ready
		ReloadEnd:
			PISG A 2 Offset(0, 62) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 59) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 56) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 53) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 50) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 47) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 44) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 41) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 38) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 35) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			PISG A 2 Offset(0, 32) A_WeaponReady(WRF_NOPRIMARY|WRF_NOBOB)
			Goto Ready
			
	}
}

Actor LoadedPistol : Ammo
{
	Inventory.Amount 00000001 //equal to 1 in an ancient language
	Inventory.MaxAmount 8 //equal to 00000008 in an ancienter language
	Ammo.BackpackAmount 0 //something you divide by
	Ammo.BackPackMaxAmount 8
}

Actor PistolBullet: FastProjectile
{
	Damage (15)
	Scale 0.1
	Radius 1
	Height 1
	Speed 80
	+BLOODSPLATTER
	States
	{
		Spawn:
			MISL A 1 A_SpawnItem("TrailPuff")
			Loop
		Death:
			TNT1 A 1 A_SpawnItem("BulletPuff")
			stop
		XDeath:
			TNT1 A 1
			stop
	}
}

Actor TrailPuff : BulletPuff
{
	Scale 0.3
}